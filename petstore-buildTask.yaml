apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build
spec:
  params:
    - name: PATH_CONTEXT
      description: xxxxxx
      type: string
      default: .
    - name: MAVEN_ARGS_APPEND
      description: Additional Maven arguments
      type: string
      default: ''
    - name: MAVEN_MIRROR_URL
      description: The base URL of a mirror used for retrieving artifacts
      type: string
      default: ''   
    - name: MAVEN_CLEAR_REPO
      description: Remove the Maven repository after the artifact is built
      type: string
      default: 'false'   
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint 
      type: string
      default: 'false' 
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: output-image
        type: image
      - name: builder-image
        type: image
  steps :
    - name: gen-env-file
      command:
        - /bin/sh
        - '-c'
      args:
        - |-
          echo "MAVEN_CLEAR_REPO=$(params.MAVEN_CLEAR_REPO)" > env-file

          [[ '$(params.MAVEN_ARGS_APPEND)' != "" ]] &&
            echo "MAVEN_ARGS_APPEND=$(params.MAVEN_ARGS_APPEND)" >> env-file

          [[ '$(params.MAVEN_MIRROR_URL)' != "" ]] &&
            echo "MAVEN_MIRROR_URL=$(params.MAVEN_MIRROR_URL)" >> env-file

          echo "Generated Env file"
          echo "------------------------------"
          cat env-file
          echo "------------------------------"
      image: registry.redhat.io/ocp-tools-43-tech-preview/source-to-image-rhel8
      volumeMounts:
        - name: envparams
          mountPath: /env-params
      workingDir: /env-params
    - name: generate
      command:
        - s2i
        - build
        - $(params.PATH_CONTEXT)
        - registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift
        - '--image-scripts-url'
        - 'image:///usr/local/s2i'
        - '--as-dockerfile'
        - /gen-source/Dockerfile.gen
        - '--environment-file'
        - /env-params/env-file
      image: registry.redhat.io/ocp-tools-43-tech-preview/source-to-image-rhel8
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
        - name: envparams
          mountPath: /env-params
      workingDir: /workspace/source
    - name: view-workspace
      command:
        - ls
        - -al
        - /workspace
      image: registry.redhat.io/ocp-tools-43-tech-preview/source-to-image-rhel8
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      command:
        - buildah
        - bud
        - '--tls-verify=$(params.TLSVERIFY)'
        - '--layers'
        - '-f'
        - /gen-source/Dockerfile.gen
        - '-t'
        - $(resources.outputs.builder-image.url)
        - .
      image: registry.redhat.io/rhel8/buildah
      resources: {}
      securityContext:
        privileged: true
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
      workingDir: /gen-source
    - name: gen-server-xml-file
      command:
        - /bin/sh
        - '-c'
      args:
        - |-
          echo "<server description=\"Sample Liberty server\">" > server.xml
          echo "  <featureManager>" >> server.xml
          echo "    <feature>jaxrs-2.1</feature>" >> server.xml
          echo "    <feature>cdi-2.0</feature>" >> server.xml
          echo "    <feature>mpRestClient-1.4</feature>" >> server.xml
          echo "    <feature>mpConfig-1.4</feature>" >> server.xml
          echo "    <feature>jsonp-1.1</feature>" >> server.xml
          echo "  </featureManager>" >> server.xml
          echo "  <variable name=\"default.http.port\" defaultValue=\"9080\"/>" >> server.xml
          echo "  <variable name=\"default.https.port\" defaultValue=\"9443\"/>" >> server.xml
          echo "  <httpEndpoint host=\"*\" httpPort=\"\${default.http.port}\" httpsPort=\"\${default.https.port}\" id=\"defaultHttpEndpoint\"/>" >> server.xml
          echo "  <webApplication location=\"petstore.war\" contextRoot=\"/pets\"/>" >> server.xml
          echo "</server>" >> server.xml
          echo "Generated Env file"
          echo "------------------------------"
          cat env-file
          echo "------------------------------"
      image: registry.redhat.io/ocp-tools-43-tech-preview/source-to-image-rhel8
      volumeMounts:
        - name: envparams
          mountPath: /env-params
      workingDir: /env-params
    - name: view-server-xml
      command:
        - cat
        - server.xml
      image: registry.redhat.io/ocp-tools-43-tech-preview/source-to-image-rhel8
      volumeMounts:
        - name: envparams
          mountPath: /env-params
      workingDir: /env-params
    - name: gen-binary-extraction-dockerfile
      command:
        - /bin/sh
        - '-c'
      args:
        - |-
          echo "FROM $(resources.outputs.builder-image.url) as builder-image" > ext-dockerfile.gen
          echo "FROM openliberty/open-liberty as runtime-image" >> ext-dockerfile.gen
          echo "COPY --from=builder-image /tmp/src/target/applicationPetstore.war /config/apps/petstore.war" >> ext-dockerfile.gen
          echo "COPY server.xml /config/server.xml" >> ext-dockerfile.gen
          echo "------------------------------"
          cat ext-dockerfile.gen
          echo "------------------------------"
      image: registry.redhat.io/ocp-tools-43-tech-preview/source-to-image-rhel8
      volumeMounts:
        - name: envparams
          mountPath: /env-params
      workingDir: /env-params
    - name: extract-built-object
      command:
        - buildah
        - bud
        - '--tls-verify=$(params.TLSVERIFY)'
        - '--layers'
        - '-f'
        - ext-dockerfile.gen
        - '-t'
        - $(resources.outputs.output-image.url)
        - .
      image: registry.redhat.io/rhel8/buildah
      resources: {}
      securityContext:
        privileged: true
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: envparams
          mountPath: /env-params
      workingDir: /env-params
    - name: view-mages
      command:
        - buildah
        - images
      image: registry.redhat.io/rhel8/buildah
      resources: {}
      securityContext:
        privileged: true
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
    - name: push-image-to-openshift
      command:
        - buildah
        - push
        - '--tls-verify=$(params.TLSVERIFY)'
        - $(resources.outputs.output-image.url)
        - 'docker://$(resources.outputs.output-image.url)'
      image: registry.redhat.io/rhel8/buildah
      resources: {}
      securityContext:
        privileged: true
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - emptyDir: {}
      name: envparams
    - emptyDir: {}
      name: gen-source
    - emptyDir: {}
      name: varlibcontainers